{
  "stats": {
    "suites": 4,
    "tests": 12,
    "passes": 12,
    "pending": 0,
    "failures": 0,
    "start": "2024-10-06T19:08:26.740Z",
    "end": "2024-10-06T19:08:42.565Z",
    "duration": 15825,
    "testsRegistered": 12,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "af1925c5-b173-406f-bae5-9d031f1c5ff3",
      "title": "",
      "fullFile": "cypress\\integration\\trello.spec.js",
      "file": "cypress\\integration\\trello.spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "99cbc285-ca87-47dd-939d-f37f554f30b3",
          "title": "Trello API CRUD Operations",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "c7113f05-34aa-4867-b1fe-91bfcde6000f",
              "title": "Board CRUD Operations",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Create a new Trello board",
                  "fullTitle": "Trello API CRUD Operations Board CRUD Operations Create a new Trello board",
                  "timedOut": null,
                  "duration": 1498,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.request({\n  method: \"POST\",\n  url: `${baseURL}/1/boards`,\n  qs: {\n    name: \"My first board\",\n    key: apiKey,\n    token: apiToken\n  }\n}).then(response => {\n  const res = response.body;\n  boardId = res.id;\n  expect(response.status).to.eql(200);\n  cy.log(`Board created with ID: ${boardId}`);\n});",
                  "err": {},
                  "uuid": "c3751485-f43a-48a2-a43d-f87867900026",
                  "parentUUID": "c7113f05-34aa-4867-b1fe-91bfcde6000f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Retrieve the Trello board",
                  "fullTitle": "Trello API CRUD Operations Board CRUD Operations Retrieve the Trello board",
                  "timedOut": null,
                  "duration": 598,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.request({\n  method: \"GET\",\n  url: `${baseURL}/1/boards/${boardId}`,\n  qs: {\n    key: apiKey,\n    token: apiToken\n  }\n}).then(response => {\n  expect(response.status).to.eql(200);\n  expect(response.body.id).to.eql(boardId);\n  cy.log(`Retrieved board with ID: ${boardId}`);\n});",
                  "err": {},
                  "uuid": "65262fcd-3c55-4eed-befa-d881d3c86906",
                  "parentUUID": "c7113f05-34aa-4867-b1fe-91bfcde6000f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Update the Trello board",
                  "fullTitle": "Trello API CRUD Operations Board CRUD Operations Update the Trello board",
                  "timedOut": null,
                  "duration": 633,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.request({\n  method: \"PUT\",\n  url: `${baseURL}/1/boards/${boardId}`,\n  qs: {\n    name: \"Updated board name\",\n    key: apiKey,\n    token: apiToken\n  }\n}).then(response => {\n  expect(response.status).to.eql(200);\n  expect(response.body.name).to.eql(\"Updated board name\");\n  cy.log(`Updated board name to: \"Updated board name\"`);\n});",
                  "err": {},
                  "uuid": "639be3b0-735d-42b6-b9a4-9bafd40dba0a",
                  "parentUUID": "c7113f05-34aa-4867-b1fe-91bfcde6000f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Delete the Trello board",
                  "fullTitle": "Trello API CRUD Operations Board CRUD Operations Delete the Trello board",
                  "timedOut": null,
                  "duration": 1784,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.request({\n  method: \"DELETE\",\n  url: `${baseURL}/1/boards/${boardId}`,\n  qs: {\n    key: apiKey,\n    token: apiToken\n  }\n}).then(response => {\n  expect(response.status).to.eql(200);\n  cy.log(`Deleted board with ID: ${boardId}`);\n});",
                  "err": {},
                  "uuid": "36358d77-4c93-4b69-809a-dd2e146c715d",
                  "parentUUID": "c7113f05-34aa-4867-b1fe-91bfcde6000f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c3751485-f43a-48a2-a43d-f87867900026",
                "65262fcd-3c55-4eed-befa-d881d3c86906",
                "639be3b0-735d-42b6-b9a4-9bafd40dba0a",
                "36358d77-4c93-4b69-809a-dd2e146c715d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 4513,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "1b1ac135-3a20-4c15-9540-0bcdf9ab7681",
              "title": "List CRUD Operations",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Create a new list on the board",
                  "fullTitle": "Trello API CRUD Operations List CRUD Operations Create a new list on the board",
                  "timedOut": null,
                  "duration": 1170,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.request({\n  method: \"POST\",\n  url: `${baseURL}/1/lists`,\n  qs: {\n    name: \"To Do\",\n    idBoard: boardId,\n    key: apiKey,\n    token: apiToken\n  }\n}).then(response => {\n  listId = response.body.id;\n  expect(response.status).to.eql(200);\n  cy.log(`List created with ID: ${listId}`);\n});",
                  "err": {},
                  "uuid": "c0b85258-8c98-40eb-85c4-b6840d283f99",
                  "parentUUID": "1b1ac135-3a20-4c15-9540-0bcdf9ab7681",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Retrieve the list",
                  "fullTitle": "Trello API CRUD Operations List CRUD Operations Retrieve the list",
                  "timedOut": null,
                  "duration": 618,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.request({\n  method: \"GET\",\n  url: `${baseURL}/1/lists/${listId}`,\n  qs: {\n    key: apiKey,\n    token: apiToken\n  }\n}).then(response => {\n  expect(response.status).to.eql(200);\n  expect(response.body.name).to.eql(\"To Do\");\n  cy.log(`Retrieved list with ID: ${listId}`);\n});",
                  "err": {},
                  "uuid": "f50084e0-c6ef-4fb3-acf1-dc147aa9bdaa",
                  "parentUUID": "1b1ac135-3a20-4c15-9540-0bcdf9ab7681",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Update the list name",
                  "fullTitle": "Trello API CRUD Operations List CRUD Operations Update the list name",
                  "timedOut": null,
                  "duration": 587,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.request({\n  method: \"PUT\",\n  url: `${baseURL}/1/lists/${listId}`,\n  qs: {\n    name: \"In Progress\",\n    key: apiKey,\n    token: apiToken\n  }\n}).then(response => {\n  expect(response.status).to.eql(200);\n  expect(response.body.name).to.eql(\"In Progress\");\n  cy.log(`Updated list name to: \"In Progress\"`);\n});",
                  "err": {},
                  "uuid": "d9382603-728d-4caf-ba60-25356e829fb0",
                  "parentUUID": "1b1ac135-3a20-4c15-9540-0bcdf9ab7681",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Archive the list",
                  "fullTitle": "Trello API CRUD Operations List CRUD Operations Archive the list",
                  "timedOut": null,
                  "duration": 589,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.request({\n  method: \"PUT\",\n  url: `${baseURL}/1/lists/${listId}/closed`,\n  qs: {\n    value: true,\n    key: apiKey,\n    token: apiToken\n  }\n}).then(response => {\n  expect(response.status).to.eql(200);\n  expect(response.body.closed).to.eql(true);\n  cy.log(`Archived list with ID: ${listId}`);\n});",
                  "err": {},
                  "uuid": "e9a79f7f-7c8d-409c-b875-658e1622c2ed",
                  "parentUUID": "1b1ac135-3a20-4c15-9540-0bcdf9ab7681",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c0b85258-8c98-40eb-85c4-b6840d283f99",
                "f50084e0-c6ef-4fb3-acf1-dc147aa9bdaa",
                "d9382603-728d-4caf-ba60-25356e829fb0",
                "e9a79f7f-7c8d-409c-b875-658e1622c2ed"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2964,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "9799b7e4-9348-44bd-8be8-0e73643805d1",
              "title": "Card CRUD Operations",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Create a new card in the list",
                  "fullTitle": "Trello API CRUD Operations Card CRUD Operations Create a new card in the list",
                  "timedOut": null,
                  "duration": 2455,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.request({\n  method: \"POST\",\n  url: `${baseURL}/1/cards`,\n  qs: {\n    name: \"Task 1\",\n    idList: listId,\n    key: apiKey,\n    token: apiToken\n  }\n}).then(response => {\n  cardId = response.body.id;\n  expect(response.status).to.eql(200);\n  cy.log(`Card created with ID: ${cardId}`);\n});",
                  "err": {},
                  "uuid": "84eab5ea-ed16-4cb9-a1db-8392bc3ea704",
                  "parentUUID": "9799b7e4-9348-44bd-8be8-0e73643805d1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Retrieve the card",
                  "fullTitle": "Trello API CRUD Operations Card CRUD Operations Retrieve the card",
                  "timedOut": null,
                  "duration": 616,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.request({\n  method: \"GET\",\n  url: `${baseURL}/1/cards/${cardId}`,\n  qs: {\n    key: apiKey,\n    token: apiToken\n  }\n}).then(response => {\n  expect(response.status).to.eql(200);\n  expect(response.body.name).to.eql(\"Task 1\");\n  cy.log(`Retrieved card with ID: ${cardId}`);\n});",
                  "err": {},
                  "uuid": "573c6a55-6b5e-4a07-98cc-4c4e72b0f54f",
                  "parentUUID": "9799b7e4-9348-44bd-8be8-0e73643805d1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Update the card name",
                  "fullTitle": "Trello API CRUD Operations Card CRUD Operations Update the card name",
                  "timedOut": null,
                  "duration": 669,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.request({\n  method: \"PUT\",\n  url: `${baseURL}/1/cards/${cardId}`,\n  qs: {\n    name: \"Updated Task 1\",\n    key: apiKey,\n    token: apiToken\n  }\n}).then(response => {\n  expect(response.status).to.eql(200);\n  expect(response.body.name).to.eql(\"Updated Task 1\");\n  cy.log(`Updated card name to: \"Updated Task 1\"`);\n});",
                  "err": {},
                  "uuid": "8a044587-f850-424c-abb9-d6be5049ce89",
                  "parentUUID": "9799b7e4-9348-44bd-8be8-0e73643805d1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Delete the card",
                  "fullTitle": "Trello API CRUD Operations Card CRUD Operations Delete the card",
                  "timedOut": null,
                  "duration": 951,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.request({\n  method: \"DELETE\",\n  url: `${baseURL}/1/cards/${cardId}`,\n  qs: {\n    key: apiKey,\n    token: apiToken\n  }\n}).then(response => {\n  expect(response.status).to.eql(200);\n  cy.log(`Deleted card with ID: ${cardId}`);\n});",
                  "err": {},
                  "uuid": "a043488d-0f81-4d44-ab27-76165b5bef8e",
                  "parentUUID": "9799b7e4-9348-44bd-8be8-0e73643805d1",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "84eab5ea-ed16-4cb9-a1db-8392bc3ea704",
                "573c6a55-6b5e-4a07-98cc-4c4e72b0f54f",
                "8a044587-f850-424c-abb9-d6be5049ce89",
                "a043488d-0f81-4d44-ab27-76165b5bef8e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 4691,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "trellomochawesome-report",
        "overwrite": false,
        "html": true,
        "json": true
      },
      "version": "6.2.0"
    }
  }
}